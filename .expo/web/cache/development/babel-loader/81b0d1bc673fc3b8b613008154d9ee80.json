{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/home/monica/gradprojectexpo/trialone/Blockchain-Certificates-Authentication/screens/LinksScreen.js\";\nimport * as React from 'react';\nimport { Header, Component } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { Ionicons } from '@expo/vector-icons';\nimport * as WebBrowser from 'expo-web-browser';\nimport { RectButton, ScrollView } from 'react-native-gesture-handler';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createMaterialTopTabNavigator } from '@react-navigation/material-top-tabs';\nvar Tab = createMaterialTopTabNavigator();\nvar walletID = \"C44H0ImYvrWRpsBVcCHLfjU53UbPUNQiV\";\nvar connectionName;\n\nfunction CredentialsScreen() {\n  return React.createElement(View, {\n    style: {\n      flex: 1,\n      justifyContent: 'center',\n      alignItems: 'center'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    }\n  }, React.createElement(Text, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    }\n  }, \"Feed!\"));\n}\n\nfunction ConnectionsScreen() {\n  var _React$useState = React.useState([]),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      wallets = _React$useState2[0],\n      setWallets = _React$useState2[1];\n\n  var _React$useState3 = React.useState(\"\"),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      connectionName = _React$useState4[0],\n      setConnectionName = _React$useState4[1];\n\n  var setWalletsAndFetch = function setWalletsAndFetch(wallets) {\n    setWallets(wallets);\n    fetchConnections(wallets);\n  };\n\n  React.useEffect(function () {\n    (function _callee() {\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              console.log(\"HELLOOO00\");\n              fetchConnections();\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      });\n    })();\n  }, [setWalletsAndFetch]);\n\n  function fetchConnections() {\n    var res;\n    return _regeneratorRuntime.async(function fetchConnections$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(fetch('https://api.streetcred.id/custodian/v1/api/' + walletID + '/connections', {\n              method: 'GET',\n              headers: {\n                Authorization: 'Bearer dq6RoZ4gJWss_hRtGC_cyUBv66JwZhUbRRKukMPtv4o',\n                XStreetcredSubscriptionKey: '0c1596b315f84ac9a4de6810ef464411',\n                Accept: 'application/json'\n              }\n            }));\n\n          case 2:\n            res = _context2.sent;\n            res.json().then(function (res) {\n              return setWallets(res);\n            }).then(setConnectionName(wallets[0].name));\n            console.log(wallets.size);\n\n          case 5:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    });\n  }\n\n  return React.createElement(ScrollView, {\n    style: styles.container,\n    contentContainerStyle: styles.contentContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    }\n  }, React.createElement(OptionButton, {\n    icon: \"md-school\",\n    label: connectionName,\n    onPress: function onPress() {\n      return WebBrowser.openBrowserAsync('https://docs.expo.io');\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    }\n  }));\n}\n\nfunction MyTabs() {\n  return React.createElement(Tab.Navigator, {\n    initialRouteName: \"Credentials\",\n    tabBarOptions: {\n      activeTintColor: '#e91e63',\n      labelStyle: {\n        fontSize: 12\n      },\n      style: {\n        backgroundColor: 'lavenderblush'\n      }\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    }\n  }, React.createElement(Tab.Screen, {\n    name: \"Credentials\",\n    component: CredentialsScreen,\n    options: {\n      tabBarLabel: 'Credentials'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    }\n  }), React.createElement(Tab.Screen, {\n    name: \"Connections\",\n    component: ConnectionsScreen,\n    options: {\n      tabBarLabel: 'Connections'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    }\n  }));\n}\n\nexport default function LinksScreen() {\n  return React.createElement(MyTabs, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    }\n  });\n}\n\nfunction OptionButton(_ref) {\n  var icon = _ref.icon,\n      label = _ref.label,\n      onPress = _ref.onPress,\n      isLastOption = _ref.isLastOption;\n  return React.createElement(RectButton, {\n    style: [styles.option, isLastOption && styles.lastOption],\n    onPress: onPress,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166\n    }\n  }, React.createElement(View, {\n    style: {\n      flexDirection: 'row'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167\n    }\n  }, React.createElement(View, {\n    style: styles.optionIconContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168\n    }\n  }, React.createElement(Ionicons, {\n    name: icon,\n    size: 22,\n    color: \"rgba(0,0,0,0.35)\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169\n    }\n  })), React.createElement(View, {\n    style: styles.optionTextContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171\n    }\n  }, React.createElement(Text, {\n    style: styles.optionText,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172\n    }\n  }, label))));\n}\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fafafa'\n  },\n  contentContainer: {\n    paddingTop: 15\n  },\n  optionIconContainer: {\n    marginRight: 12\n  },\n  option: {\n    backgroundColor: '#fdfdfd',\n    paddingHorizontal: 15,\n    paddingVertical: 15,\n    borderWidth: StyleSheet.hairlineWidth,\n    borderBottomWidth: 0,\n    borderColor: '#ededed'\n  },\n  lastOption: {\n    borderBottomWidth: StyleSheet.hairlineWidth\n  },\n  optionText: {\n    fontSize: 15,\n    alignSelf: 'flex-start',\n    marginTop: 1\n  }\n});","map":{"version":3,"sources":["/home/monica/gradprojectexpo/trialone/Blockchain-Certificates-Authentication/screens/LinksScreen.js"],"names":["React","Header","Component","Ionicons","WebBrowser","RectButton","ScrollView","NavigationContainer","createMaterialTopTabNavigator","Tab","walletID","connectionName","CredentialsScreen","flex","justifyContent","alignItems","ConnectionsScreen","useState","wallets","setWallets","setConnectionName","setWalletsAndFetch","fetchConnections","useEffect","console","log","fetch","method","headers","Authorization","XStreetcredSubscriptionKey","Accept","res","json","then","name","size","styles","container","contentContainer","openBrowserAsync","MyTabs","activeTintColor","labelStyle","fontSize","style","backgroundColor","tabBarLabel","LinksScreen","OptionButton","icon","label","onPress","isLastOption","option","lastOption","flexDirection","optionIconContainer","optionTextContainer","optionText","StyleSheet","create","paddingTop","marginRight","paddingHorizontal","paddingVertical","borderWidth","hairlineWidth","borderBottomWidth","borderColor","alignSelf","marginTop"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Header, Component } from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\nimport { Ionicons } from '@expo/vector-icons';\nimport * as WebBrowser from 'expo-web-browser';\nimport { RectButton, ScrollView } from 'react-native-gesture-handler';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createMaterialTopTabNavigator } from '@react-navigation/material-top-tabs';\n\nconst Tab = createMaterialTopTabNavigator();\nvar walletID = \"C44H0ImYvrWRpsBVcCHLfjU53UbPUNQiV\";\nvar connectionName;\n\nfunction CredentialsScreen() {\n   return (\n      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n         <Text>Feed!</Text>\n      </View>\n   );\n}\n\nfunction ConnectionsScreen() {\n\n   const [wallets, setWallets] = React.useState([]);\n   const [connectionName, setConnectionName] = React.useState(\"\");\n\n   const setWalletsAndFetch = (wallets) => {\n      setWallets(wallets);\n      fetchConnections(wallets);\n   }\n\n   React.useEffect(() => {\n      (async () => {\n         console.log(\"HELLOOO00\");\n         fetchConnections();\n      })();\n   }, [setWalletsAndFetch]);\n\n   async function fetchConnections() {\n\n      const res = await fetch('https://api.streetcred.id/custodian/v1/api/' + walletID + '/connections', {\n         method: 'GET',\n         headers: {\n            Authorization: 'Bearer dq6RoZ4gJWss_hRtGC_cyUBv66JwZhUbRRKukMPtv4o',\n            XStreetcredSubscriptionKey: '0c1596b315f84ac9a4de6810ef464411',\n            Accept: 'application/json',\n         },\n      });\n      res.json().then(res => setWallets(res)).then(setConnectionName(wallets[0].name))\n      console.log(wallets.size)\n\n   }\n\n   return (\n      <ScrollView style={styles.container} contentContainerStyle={styles.contentContainer}>\n         <OptionButton\n            icon=\"md-school\"\n            label={connectionName}\n            onPress={() => WebBrowser.openBrowserAsync('https://docs.expo.io')}\n         />\n{/* \n         <OptionButton\n            icon=\"md-compass\"\n            label=\"Read the React Navigation documentation\"\n            onPress={() => WebBrowser.openBrowserAsync('https://reactnavigation.org')}\n         />\n\n         <OptionButton\n            icon=\"ios-chatboxes\"\n            label=\"Ask a question on the forums\"\n            onPress={() => WebBrowser.openBrowserAsync('https://forums.expo.io')}\n            isLastOption\n         /> */}\n\n      </ScrollView>\n   );\n}\n\nfunction MyTabs() {\n   return (\n      <Tab.Navigator\n         initialRouteName=\"Credentials\"\n         tabBarOptions={{\n            activeTintColor: '#e91e63',\n            labelStyle: { fontSize: 12 },\n            style: { backgroundColor: 'lavenderblush' },\n         }}\n      >\n         <Tab.Screen\n            name=\"Credentials\"\n            component={CredentialsScreen}\n            options={{ tabBarLabel: 'Credentials' }}\n         />\n         <Tab.Screen\n            name=\"Connections\"\n            component={ConnectionsScreen}\n            options={{ tabBarLabel: 'Connections' }}\n         />\n      </Tab.Navigator>\n   );\n}\n\n\n\nexport default function LinksScreen() {\n\n   // const [wallets, setWallets] = React.useState([]);\n   // const [connectionName, setConnectionName] = React.useState(\"\");\n\n   // const setWalletsAndFetch = (wallets) => {\n   //    setWallets(wallets);\n   //    fetchConnections(wallets);\n   // }\n\n   // React.useEffect(() => {\n   //    (async () => {\n   //       console.log(\"HELLOOO00\");\n   //       fetchConnections();\n   //    })();\n   // }, [setWalletsAndFetch]);\n\n   // async function fetchConnections() {\n\n   //    const res = await fetch('https://api.streetcred.id/custodian/v1/api/' + walletID + '/connections', {\n   //       method: 'GET',\n   //       headers: {\n   //          Authorization: 'Bearer dq6RoZ4gJWss_hRtGC_cyUBv66JwZhUbRRKukMPtv4o',\n   //          XStreetcredSubscriptionKey: '0c1596b315f84ac9a4de6810ef464411',\n   //          Accept: 'application/json',\n   //       },\n   //    });\n   //    res.json().then(res => setWallets(res)).then(setConnectionName(wallets[0].name))\n\n   // }\n\n   return (\n      <MyTabs />\n\n      // <ScrollView style={styles.container} contentContainerStyle={styles.contentContainer}>\n      //    <OptionButton\n      //       icon=\"md-school\"\n      //       label={connectionName}\n      //       onPress={() => WebBrowser.openBrowserAsync('https://docs.expo.io')}\n      //    />\n\n      //    <OptionButton\n      //       icon=\"md-compass\"\n      //       label=\"Read the React Navigation documentation\"\n      //       onPress={() => WebBrowser.openBrowserAsync('https://reactnavigation.org')}\n      //    />\n\n      //    <OptionButton\n      //       icon=\"ios-chatboxes\"\n      //       label=\"Ask a question on the forums\"\n      //       onPress={() => WebBrowser.openBrowserAsync('https://forums.expo.io')}\n      //       isLastOption\n      //    />\n      // </ScrollView>\n   );\n}\n\n\n\nfunction OptionButton({ icon, label, onPress, isLastOption }) {\n   return (\n      <RectButton style={[styles.option, isLastOption && styles.lastOption]} onPress={onPress}>\n         <View style={{ flexDirection: 'row' }}>\n            <View style={styles.optionIconContainer}>\n               <Ionicons name={icon} size={22} color=\"rgba(0,0,0,0.35)\" />\n            </View>\n            <View style={styles.optionTextContainer}>\n               <Text style={styles.optionText}>{label}</Text>\n            </View>\n         </View>\n      </RectButton>\n   );\n}\n\nconst styles = StyleSheet.create({\n   container: {\n      flex: 1,\n      backgroundColor: '#fafafa',\n   },\n   contentContainer: {\n      paddingTop: 15,\n   },\n   optionIconContainer: {\n      marginRight: 12,\n   },\n   option: {\n      backgroundColor: '#fdfdfd',\n      paddingHorizontal: 15,\n      paddingVertical: 15,\n      borderWidth: StyleSheet.hairlineWidth,\n      borderBottomWidth: 0,\n      borderColor: '#ededed',\n   },\n   lastOption: {\n      borderBottomWidth: StyleSheet.hairlineWidth,\n   },\n   optionText: {\n      fontSize: 15,\n      alignSelf: 'flex-start',\n      marginTop: 1,\n   },\n});\n\n\n// import React, { Component } from 'react'\n// import { View, Text } from 'react-native'\n\n// var walletID = \"C44H0ImYvrWRpsBVcCHLfjU53UbPUNQiV\"\n// let jsondata;  \n// let data = [];\n\n// class HttpExample extends Component {\n//    state = {\n//       data: ''\n//    }\n//    componentDidMount = () => {\n//       fetch('https://api.streetcred.id/custodian/v1/api/'+ walletID + '/connections', {\n//          method: 'GET',\n//          headers: {\n//           Authorization: 'Bearer dq6RoZ4gJWss_hRtGC_cyUBv66JwZhUbRRKukMPtv4o',\n//           XStreetcredSubscriptionKey: '0c1596b315f84ac9a4de6810ef464411',\n//           Accept: 'application/json',\n//           'Content-Type': 'application/json',\n//         },\n//       })\n//       .then((response) => response.json())\n//       .then((responseJson) => {\n//          console.log(responseJson);\n//          // jsondata = responseJson.values;\n//          this.setState({\n//             data: responseJson\n//          })\n//       })\n//       .catch((error) => {\n//          console.error(error);\n//       });\n//       console.log(\"HII \"+ jsondata)\n//    }\n//    render() {\n//       return (\n//          <View>\n//             <Text>\n//                hi\n//                {this.state.data.Text}\n//             </Text>\n//          </View>\n//       )\n//    }\n// }\n// export default HttpExample"]},"metadata":{},"sourceType":"module"}