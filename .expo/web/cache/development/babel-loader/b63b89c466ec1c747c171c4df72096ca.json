{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/home/marina/Application/Blockchain-Certificates-Authentication/navigation/QRScanner.js\";\nimport React, { useState, useEffect, Component } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport AsyncStorage from \"react-native-web/dist/exports/AsyncStorage\";\nimport { BarCodeScanner } from 'expo-barcode-scanner';\nimport { ForceTouchGestureHandler } from 'react-native-gesture-handler';\nvar invitationFromURL = ' ';\nexport default function QRScanner(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      hasPermission = _useState2[0],\n      setHasPermission = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      scanned = _useState4[0],\n      setScanned = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      hasError = _useState6[0],\n      setErrors = _useState6[1];\n\n  var _useState7 = useState({}),\n      _useState8 = _slicedToArray(_useState7, 2),\n      wallets = _useState8[0],\n      setWallets = _useState8[1];\n\n  var _useState9 = useState({}),\n      _useState10 = _slicedToArray(_useState9, 2),\n      connections = _useState10[0],\n      setConnections = _useState10[1];\n\n  var splitted;\n  var userName = 'lastWallet';\n  var userWalletID;\n  useEffect(function () {\n    (function _callee() {\n      var _await$BarCodeScanner, status;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(BarCodeScanner.requestPermissionsAsync());\n\n            case 2:\n              _await$BarCodeScanner = _context.sent;\n              status = _await$BarCodeScanner.status;\n              setHasPermission(status === 'granted');\n              fetchData();\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      });\n    })();\n  }, []);\n\n  function fetchData() {\n    var res;\n    return _regeneratorRuntime.async(function fetchData$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(fetch('https://api.streetcred.id/custodian/v1/api/wallets', {\n              method: 'GET',\n              headers: {\n                Authorization: 'Bearer L2JBCYw6UaWWQiRZ3U_k6JHeeIkPCiKyu5aR6gxy4P8',\n                XStreetcredSubscriptionKey: '4ed313b114eb49abbd155ad36137df51',\n                Accept: 'application/json',\n                \"Content-Type\": 'application/json'\n              }\n            }));\n\n          case 2:\n            res = _context2.sent;\n            res.json().then(function (res) {\n              return setWallets(res);\n            });\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    });\n  }\n\n  function acceptInvitation(walletID, Invitation) {\n    var data, fetchURLForAcceptInvitaion, res;\n    return _regeneratorRuntime.async(function acceptInvitation$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            data = new FormData();\n            data.append(\"invitation\", Invitation);\n            fetchURLForAcceptInvitaion = 'https://api.streetcred.id/custodian/v1/api/' + walletID + '/connections/invitation';\n            _context3.next = 5;\n            return _regeneratorRuntime.awrap(fetch(fetchURLForAcceptInvitaion, {\n              method: 'POST',\n              headers: {\n                Authorization: 'Bearer L2JBCYw6UaWWQiRZ3U_k6JHeeIkPCiKyu5aR6gxy4P8',\n                XStreetcredSubscriptionKey: '4ed313b114eb49abbd155ad36137df51',\n                Accept: 'application/json',\n                'Content-Type': 'multipart/form-data'\n              },\n              body: data\n            }));\n\n          case 5:\n            res = _context3.sent;\n            res.json().then(function (res) {\n              return setConnections(res);\n            });\n            console.log(res.json.toString);\n\n          case 8:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    });\n  }\n\n  function sendAcceptConnectionNotification() {\n    var res;\n    return _regeneratorRuntime.async(function sendAcceptConnectionNotification$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.next = 2;\n            return _regeneratorRuntime.awrap(fetch('http://e1475bee.ngrok.io/webhook', {\n              method: 'POST',\n              headers: {\n                Accept: 'application/json',\n                \"Content-Type\": 'application/json'\n              },\n              body: JSON.stringify({\n                \"message_type\": \"new_connection\",\n                \"object_id\": \"dasdadsasdadasdaddasdtesssst\",\n                \"data\": {\n                  \"param1\": \"value1\",\n                  \"param2\": \"value2\"\n                }\n              })\n            }));\n\n          case 2:\n            res = _context4.sent;\n            res.json().then(console.log(JSON.stringify(res)));\n\n          case 4:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    });\n  }\n\n  function getWalletId() {\n    for (var index = 0; index < wallets.length; index++) {\n      if (wallets[index].name == userName) userWalletID = wallets[index].walletId;\n    }\n  }\n\n  var handleBarCodeScanned = function handleBarCodeScanned(_ref2) {\n    var type = _ref2.type,\n        data = _ref2.data;\n    setScanned(true);\n    splitted = data.split('=');\n    invitationFromURL = splitted[1];\n    Alert.alert('New Connection Request ', 'Do you want to connect?', [{\n      text: 'YES',\n      onPress: function onPress() {\n        getWalletId();\n        acceptInvitation(userWalletID, invitationFromURL);\n        sendAcceptConnectionNotification();\n        navigation.navigate(\"Root\");\n      }\n    }, {\n      text: 'NO',\n      onPress: function onPress() {\n        navigation.navigate(\"Root\");\n      }\n    }]);\n  };\n\n  if (hasPermission === null) {\n    return React.createElement(Text, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      }\n    }, \"Requesting for camera permission\");\n  }\n\n  if (hasPermission === false) {\n    return React.createElement(Text, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      }\n    }, \"No access to camera\");\n  }\n\n  return React.createElement(View, {\n    style: {\n      flex: 1,\n      flexDirection: 'column',\n      justifyContent: 'flex-end'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160\n    }\n  }, React.createElement(BarCodeScanner, {\n    onBarCodeScanned: scanned ? undefined : handleBarCodeScanned,\n    style: StyleSheet.absoluteFillObject,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166\n    }\n  }), scanned && React.createElement(Button, {\n    title: 'Tap to Scan Again',\n    onPress: function onPress() {\n      return setScanned(false);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174\n    }\n  }));\n}","map":{"version":3,"sources":["/home/marina/Application/Blockchain-Certificates-Authentication/navigation/QRScanner.js"],"names":["React","useState","useEffect","Component","BarCodeScanner","ForceTouchGestureHandler","invitationFromURL","QRScanner","navigation","hasPermission","setHasPermission","scanned","setScanned","hasError","setErrors","wallets","setWallets","connections","setConnections","splitted","userName","userWalletID","requestPermissionsAsync","status","fetchData","fetch","method","headers","Authorization","XStreetcredSubscriptionKey","Accept","res","json","then","acceptInvitation","walletID","Invitation","data","FormData","append","fetchURLForAcceptInvitaion","body","console","log","toString","sendAcceptConnectionNotification","JSON","stringify","getWalletId","index","length","name","walletId","handleBarCodeScanned","type","split","Alert","alert","text","onPress","navigate","flex","flexDirection","justifyContent","undefined","StyleSheet","absoluteFillObject"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, Component } from 'react';\nimport { Text, View, StyleSheet, Button, Alert, AsyncStorage } from 'react-native';\nimport { BarCodeScanner } from 'expo-barcode-scanner';\nimport { ForceTouchGestureHandler } from 'react-native-gesture-handler';\n\nvar invitationFromURL = ' ';\n\nexport default function QRScanner({ navigation }) {\n\n  const [hasPermission, setHasPermission] = useState(null);\n  const [scanned, setScanned] = useState(false);\n  const [hasError, setErrors] = useState(false);\n  const [wallets, setWallets] = useState({});\n  const [connections, setConnections] = useState({});\n  var splitted;\n  var userName = 'lastWallet'; // This will be changed will sign up page is ready \n  var userWalletID;\n\n  useEffect(() => {\n    (async () => {\n      const { status } = await BarCodeScanner.requestPermissionsAsync();\n      setHasPermission(status === 'granted');\n      fetchData();\n    })();\n  }, []);\n\n\n  async function fetchData() {\n    const res = await fetch('https://api.streetcred.id/custodian/v1/api/wallets', {\n      method: 'GET',\n      headers: {\n        Authorization: 'Bearer L2JBCYw6UaWWQiRZ3U_k6JHeeIkPCiKyu5aR6gxy4P8',\n        XStreetcredSubscriptionKey: '4ed313b114eb49abbd155ad36137df51',\n        Accept: 'application/json',\n        \"Content-Type\": 'application/json',\n      }\n    });\n    res.json().then(res => setWallets(res))\n\n  }\n\n  async function acceptInvitation(walletID, Invitation) {\n    let data = new FormData();\n    data.append(\"invitation\", Invitation);\n    var fetchURLForAcceptInvitaion = 'https://api.streetcred.id/custodian/v1/api/' + walletID + '/connections/invitation';\n    const res = await fetch(fetchURLForAcceptInvitaion, {\n      method: 'POST',\n      headers: {\n        Authorization: 'Bearer L2JBCYw6UaWWQiRZ3U_k6JHeeIkPCiKyu5aR6gxy4P8',\n        XStreetcredSubscriptionKey: '4ed313b114eb49abbd155ad36137df51',\n        Accept: 'application/json',\n        'Content-Type': 'multipart/form-data',\n      },\n      body: data,\n    });\n    res.json().then(res => setConnections(res))\n    console.log(res.json.toString)\n  }\n  async function sendAcceptConnectionNotification() {\n    const res = await fetch('http://e1475bee.ngrok.io/webhook', {\n      method: 'POST',\n      headers: {\n        Accept: 'application/json',\n        \"Content-Type\": 'application/json',\n      },\n      body: JSON.stringify({\n        \"message_type\": \"new_connection\",\n        \"object_id\": \"dasdadsasdadasdaddasdtesssst\",\n        \"data\": {\n          \"param1\": \"value1\",\n          \"param2\": \"value2\"\n\n        }\n      }),\n    });\n    res.json().then(console.log(JSON.stringify(res)))\n\n  }\n\n  function getWalletId() {\n    for (let index = 0; index < wallets.length; index++) {\n      if (wallets[index].name == userName)\n        userWalletID = wallets[index].walletId;\n    }\n    // console.log(wallets)\n  }\n\n  const handleBarCodeScanned = ({ type, data }) => {\n    setScanned(true);\n    splitted = data.split('=');\n    invitationFromURL = splitted[1];\n\n    // const saveUserId = async (Key,invitationFromURL) => {\n    //   try {\n    //     await AsyncStorage.setItem(Key, invitationFromURL);\n    //   } catch (error) {\n    //     // Error retrieving data\n    //     console.log(error.message);\n    //   }\n    // };\n\n    //saveUserId('invitationFromURL',invitationFromURL);\n    Alert.alert(\n      'New Connection Request ',\n      'Do you want to connect?',\n      [\n        {\n          text: 'YES', onPress: () => {\n            //saveUserId('Alert','Yes') \n            getWalletId();\n            acceptInvitation(userWalletID, invitationFromURL);\n            // console.log(connections);\n            sendAcceptConnectionNotification();\n            navigation.navigate(\"Root\");\n          }\n        },\n        {\n          text: 'NO', onPress: () => {\n            //saveUserId('Alert', 'No')\n            navigation.navigate(\"Root\");\n          }\n        }\n\n      ]\n    );\n\n  };\n\n\n  // async function getInvitation( walletID, invitation )\n  //  {\n  //    console.log(walletID+\"inside\" )\n  //    console.log(invitation+\"inside\")\n  //   var fetchURLForAcceptInvitaion='https://api.streetcred.id/custodian/v1/api/'+walletID+'/connections/invitation';\n  //   const res = await fetch(fetchURLForAcceptInvitaion, {\n  //     method: 'POST',\n  //     headers: {\n  //       Authorization: 'Bearer dq6RoZ4gJWss_hRtGC_cyUBv66JwZhUbRRKukMPtv4o',\n  //       XStreetcredSubscriptionKey: '0c1596b315f84ac9a4de6810ef464411',\n  //       Accept: 'application/json',\n  //       'Content-Type': 'application/json',\n  //     },\n  //     body: JSON.stringify({\n  //         \"walletId\": walletID,\n  //         \"invitation\": invitation\n  //     }),\n  //   });\n  //   res.json().then(res => setConnections(res))\n  //  };\n\n\n  if (hasPermission === null) {\n    return <Text>Requesting for camera permission</Text>;\n  }\n  if (hasPermission === false) {\n    return <Text>No access to camera</Text>;\n  }\n\n  return (\n    <View\n      style={{\n        flex: 1,\n        flexDirection: 'column',\n        justifyContent: 'flex-end',\n      }}>\n      <BarCodeScanner\n        onBarCodeScanned={scanned ? undefined : handleBarCodeScanned}\n\n\n        style={StyleSheet.absoluteFillObject}\n      />\n\n      {scanned && (\n        <Button title={'Tap to Scan Again'} onPress={() => setScanned(false)} />\n      )}\n    </View>\n  );\n}"]},"metadata":{},"sourceType":"module"}