{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/home/monica/gradprojectexpo/trialone/Blockchain-Certificates-Authentication/navigation/QRScanner.js\";\nimport React, { useState, useEffect, Component } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport { BarCodeScanner } from 'expo-barcode-scanner';\nimport { ForceTouchGestureHandler } from 'react-native-gesture-handler';\nexport default function QRScanner() {\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      hasPermission = _useState2[0],\n      setHasPermission = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      scanned = _useState4[0],\n      setScanned = _useState4[1];\n\n  var splitted;\n  var userName = 'testMohammed';\n  var invitation = 'd';\n  var userWalletID;\n  useEffect(function () {\n    (function _callee() {\n      var _await$BarCodeScanner, status;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(BarCodeScanner.requestPermissionsAsync());\n\n            case 2:\n              _await$BarCodeScanner = _context.sent;\n              status = _await$BarCodeScanner.status;\n              setHasPermission(status === 'granted');\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      });\n    })();\n  }, []);\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      hasError = _useState6[0],\n      setErrors = _useState6[1];\n\n  var _useState7 = useState({}),\n      _useState8 = _slicedToArray(_useState7, 2),\n      wallets = _useState8[0],\n      setWallets = _useState8[1];\n\n  function fetchData() {\n    var res;\n    return _regeneratorRuntime.async(function fetchData$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(fetch('https://api.streetcred.id/custodian/v1/api/wallets', {\n              method: 'GET',\n              headers: {\n                Authorization: 'Bearer dq6RoZ4gJWss_hRtGC_cyUBv66JwZhUbRRKukMPtv4o',\n                XStreetcredSubscriptionKey: '0c1596b315f84ac9a4de6810ef464411',\n                Accept: 'application/json',\n                'Content-Type': 'application/json'\n              }\n            }));\n\n          case 2:\n            res = _context2.sent;\n            res.json().then(function (res) {\n              return setWallets(res);\n            }).catch(function (err) {\n              return setErrors(err);\n            });\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    });\n  }\n\n  useEffect(function () {\n    fetchData();\n  }, []);\n  console.log(wallets);\n\n  var handleBarCodeScanned = function handleBarCodeScanned(_ref) {\n    var type = _ref.type,\n        data = _ref.data;\n    setScanned(true);\n    alert(\"Bar code with type \" + type + \" and data \" + data + \" has been scanned!\");\n    splitted = data.split('=');\n    invitation = splitted[1];\n    console.log('Invite  ' + splitted[1]);\n  };\n\n  for (var index = 0; index < wallets.length; index++) {\n    if (wallets[index].name == \"testMohammed\") userWalletID = wallets[index].walletId;\n  }\n\n  console.log('ID=  ' + userWalletID);\n\n  function AcceptInvitation(walletID, invitation) {\n    fetch('https://api.streetcred.id/custodian/v1/api/connections/invitation', {\n      method: 'POST',\n      headers: {\n        Authorization: 'Bearer dq6RoZ4gJWss_hRtGC_cyUBv66JwZhUbRRKukMPtv4o',\n        XStreetcredSubscriptionKey: '0c1596b315f84ac9a4de6810ef464411',\n        Accept: 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        \"walletId\": walletID,\n        \"invitation\": invitation\n      })\n    });\n    walletIsCreated = true;\n  }\n\n  ;\n\n  if (hasPermission === null) {\n    return React.createElement(Text, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      }\n    }, \"Requesting for camera permission\");\n  }\n\n  if (hasPermission === false) {\n    return React.createElement(Text, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      }\n    }, \"No access to camera\");\n  }\n\n  return React.createElement(View, {\n    style: {\n      flex: 1,\n      flexDirection: 'column',\n      justifyContent: 'flex-end'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    }\n  }, React.createElement(BarCodeScanner, {\n    onBarCodeScanned: scanned ? undefined : handleBarCodeScanned,\n    style: StyleSheet.absoluteFillObject,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    }\n  }), scanned && React.createElement(Button, {\n    title: 'Tap to Scan Again',\n    onPress: function onPress() {\n      return setScanned(false);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    }\n  }));\n}","map":{"version":3,"sources":["/home/monica/gradprojectexpo/trialone/Blockchain-Certificates-Authentication/navigation/QRScanner.js"],"names":["React","useState","useEffect","Component","BarCodeScanner","ForceTouchGestureHandler","QRScanner","hasPermission","setHasPermission","scanned","setScanned","splitted","userName","invitation","userWalletID","requestPermissionsAsync","status","hasError","setErrors","wallets","setWallets","fetchData","fetch","method","headers","Authorization","XStreetcredSubscriptionKey","Accept","res","json","then","catch","err","console","log","handleBarCodeScanned","type","data","alert","split","index","length","name","walletId","AcceptInvitation","walletID","body","JSON","stringify","walletIsCreated","flex","flexDirection","justifyContent","undefined","StyleSheet","absoluteFillObject"],"mappings":"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","sourcesContent":["import React, { useState, useEffect,Component } from 'react';\nimport { Text, View, StyleSheet, Button } from 'react-native';\nimport { BarCodeScanner } from 'expo-barcode-scanner';\nimport { ForceTouchGestureHandler } from 'react-native-gesture-handler';\n\n\n\n\nexport default function QRScanner() {\n  const [hasPermission, setHasPermission] = useState(null);\n  const [scanned, setScanned] = useState(false);\n  var splitted;\n  var userName='testMohammed'; // This will be changed will sign up page is ready \n  var invitation='d';\n  var userWalletID;\n\n  useEffect(() => {\n    (async () => {\n      const { status } = await BarCodeScanner.requestPermissionsAsync();\n      setHasPermission(status === 'granted');\n    })();\n  }, []);\n\n   const [hasError, setErrors] = useState(false);\n    const [wallets, setWallets] = useState({});\n    async function fetchData() {\n      const res = await  fetch('https://api.streetcred.id/custodian/v1/api/wallets', {\n        method: 'GET',\n        headers: {\n                Authorization: 'Bearer dq6RoZ4gJWss_hRtGC_cyUBv66JwZhUbRRKukMPtv4o',\n                XStreetcredSubscriptionKey: '0c1596b315f84ac9a4de6810ef464411',\n                Accept: 'application/json',\n                'Content-Type': 'application/json',\n              }\n      });\n      res\n        .json()\n        .then(res => setWallets(res))\n        .catch(err => setErrors(err));\n    }\n  \n    useEffect(() => {\n      fetchData();\n    }, []);\n    \n    console.log(wallets)\n \n\n\n  \n\n  const handleBarCodeScanned = ({ type, data }) => {\n    setScanned(true);\n    alert(`Bar code with type ${type} and data ${data} has been scanned!`);\n    splitted = data.split('=');\n    invitation=splitted[1];\n    console.log('Invite  '+splitted[1]);\n  };\n  \n\n  for (let index = 0; index < wallets.length; index++) {\n    \n    if (wallets[index].name==\"testMohammed\")\n        userWalletID=wallets[index].walletId;\n    \n  }\n  console.log('ID=  '+userWalletID);\n  \n  function AcceptInvitation( walletID, invitation )\n   {\n    \n    fetch('https://api.streetcred.id/custodian/v1/api/connections/invitation', {\n      method: 'POST',\n      headers: {\n        Authorization: 'Bearer dq6RoZ4gJWss_hRtGC_cyUBv66JwZhUbRRKukMPtv4o',\n        XStreetcredSubscriptionKey: '0c1596b315f84ac9a4de6810ef464411',\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n          \"walletId\": walletID,\n          \"invitation\": invitation\n      }),\n    });\n    walletIsCreated=true;\n\n   };\n\n  if (hasPermission === null) {\n    return <Text>Requesting for camera permission</Text>;\n  }\n  if (hasPermission === false) {\n    return <Text>No access to camera</Text>;\n  }\n\n  return (\n    <View\n      style={{\n        flex: 1,\n        flexDirection: 'column',\n        justifyContent: 'flex-end',\n      }}>\n      <BarCodeScanner\n        onBarCodeScanned={scanned ? undefined : handleBarCodeScanned}\n        style={StyleSheet.absoluteFillObject}\n      />\n\n      {scanned && (\n        <Button title={'Tap to Scan Again'} onPress={() => setScanned(false)} />\n      )}\n    </View>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}